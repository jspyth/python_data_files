#coding:utf-8  
#py2.7  
#  该程序用于判断一份图数据文件是否为一个连通图

import json 
import csv
import re
import os


nodeFileName = 'twitter_combined.txt' # 原始数据文件
newFileName = 'twitter.txt' # 修改格式后数据文件 复制该文件数据到下边u=unionfind(）中
data = []
edges = []
nodeNum = 0
edges1 = []
LineNum = 100 # 先写上数据文件行数

class unionfind:  #构建对象类型
    def __init__(self, groups):#构造函数：对这种类型进行初始化，也就是要说明这种类型的基本结构。当后面Person对象实例化的时候就会运行这个函数
        self.groups = groups  #第一个参数self，就是起到了这个作用——接收实例化过程中传入的所有数据，这些数据是通过构造函数后面的参数导入的。
        self.items = []
        for g in groups:  
            self.items += list(g)
        self.items = set(self.items)
        self.parent = {}
        self.rootdict = {} #记住每个root下节点的数量
        for item in self.items:  
            self.rootdict[item] = 1
            self.parent[item] = item
  
    def union(self, r1, r2):  
        rr1 = self.findroot(r1)
        rr2 = self.findroot(r2)
        cr1 = self.rootdict[rr1]
        cr2 = self.rootdict[rr2]
        if cr1 >= cr2:  #将节点数量较小的树归并给节点数更大的树
            self.parent[rr2] = rr1
            self.rootdict.pop(rr2)  
            self.rootdict[rr1] = cr1 + cr2
        else:  
            self.parent[rr1] = rr2
            self.rootdict.pop(rr1)  
            self.rootdict[rr2] = cr1 + cr2
  
    def findroot(self, r):  
        """ 
        可以通过压缩路径来优化算法,即遍历路径上的每个节点直接指向根节点 
        """  
        if r in self.rootdict.keys():  
            return r  
        else:  
            return self.findroot(self.parent[r])  
  
    def createtree(self):  
        for g in self.groups:  
            if len(g) < 2:
                continue  
            else:  
                for i in range(0, len(g)-1):  
                    if self.findroot(g[i]) != self.findroot(g[i+1]): #如果处于同一个集合的节点有不同的根节点，归并之  
                        self.union(g[i], g[i+1])  
    def printree(self):
        i = 0
        rs = {}
        for item in self.items:  
            root = self.findroot(item)
            rs.setdefault(root, [])
            rs[root] += [item]
        for key in rs.keys():
            print(rs[key])
            i = i + 1
            if i > 1:
                print('该数据集不是一个连通图')
            else:
                print('该数据集是一个连通图')


nodefopen = open(nodeFileName, 'rt')

data.append('[')
for line in nodefopen:
    x1 = line.split(' ')[0].strip()
    x2 = line.split(' ')[1].strip()
    #newline = '(\''+x1+'\',\''+x2+'\')'+','
    #data.append(newline)
    nodeNum = nodeNum + 1
    Length = len(data)
    if nodeNum > LineNum:
    	newline = '(\''+x1+'\',\''+x2+'\')'
    	data.append(newline)
    else:
    	newline = '(\''+x1+'\',\''+x2+'\')'+','
    	data.append(newline)
    # print(nodeNum)
    if nodeNum > LineNum: 
        break
data.append(']')
nodefopen.close()


fopen = open(newFileName, "w")
for line in data:
    fopen.write(line)
    fopen.write('\n')
fopen.close()

  
u=unionfind([
('214328887','34428380'),
('17116707','28465635'),
('380580781','18996905'),
('221036078','153460275'),
('107830991','17868918'),
('151338729','222261763'),
('19705747','34428380'),
('222261763','88323281'),
('19933035','149538028'),
('158419434','17434613'),
('149538028','153226312'),
('364971269','153226312'),
('100581193','279787626'),
('113058991','69592091'),
('151338729','187773078'),
('406628822','262802533'),
('460282402','88323281'),
('280935165','437804658'),
('222261763','27633075'),
('285312927','151338729'),
('279787626','131613362'),
('158419434','17675120'),
('394263193','100581193'),
('254839786','88323281'),
('204317520','21548772'),
('67864340','172883064'),
('270449528','297801196'),
('153226312','187773078'),
('67864340','8088112'),
('153226312','17116707'),
('394263193','14925700'),
('124528830','307458983'),
('204317520','160237722'),
('220368467','54228724'),
('206923844','103598216'),
('153226312','380580781'),
('207594668','21146135'),
('451250774','314316607'),
('6581292','314316607'),
('34428380','31331740'),
('196327549','225444667'),
('274153775','35415466'),
('222261763','31331740'),
('279787626','72818790'),
('6581292','151338729'),
('324201646','40981798'),
('153226312','430268163'),
('88097807','153226312'),
('276308596','69592091'),
('100581193','358775055'),
('151338729','15023872'),
('16870853','70492333'),
('100581193','280935165'),
('151338729','107830991'),
('279787626','206923844'),
('314316607','430313102'),
('299715516','35359596'),
('314316607','6581292'),
('276577539','248883350'),
('151338729','67864340'),
('158419434','157829215'),
('107511013','22462180'),
('258140947','200559228'),
('258140947','19493072'),
('123371682','394263193'),
('461410856','31414569'),
('67864340','37699718'),
('67864340','124528830'),
('117901353','117674417'),
('17116707','231238695'),
('56860418','204317520'),
('43003845','314316607'),
('413275344','259842341'),
('358775055','400689940'),
('307458983','274153775'),
('222261763','307458983'),
('69592091','26929220'),
('35148062','43003845'),
('43003845','103598216'),
('299715516','166214735'),
('57490887','40981798'),
('37699718','200559228'),
('148519842','15150609'),
('461410856','17759158'),
('225444667','83943787'),
('283306479','125120339'),
('220068522','35148062'),
('153226312','21548772'),
('155661154','113058991'),
('400689940','17868918'),
('151338729','83943787'),
('72818790','31331740'),
('88097807','248883350'),
('279787626','200559228'),
('276308596','225444667'),
('195475105','380580781'),
('157829215','100581193'),
('134940306','160237722'),
('221036078','22462180'),
('31414569','17434613'),
('134940306','26929220')
])
# list类型中包含了多个tuple类型,可以先把每个边创建成tuple对象，再使用list的append方法把边动态地添加进去
# u=unionfind()
# u=unionfind(edges)
u.createtree()  
u.printree()
